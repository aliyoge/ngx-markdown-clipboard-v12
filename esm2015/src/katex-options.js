/* eslint-disable */
export class KatexSpecificOptions {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2F0ZXgtb3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9zcmMva2F0ZXgtb3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsTUFBTSxPQUFPLG9CQUFvQjtDQThFaEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuZXhwb3J0IGNsYXNzIEthdGV4U3BlY2lmaWNPcHRpb25zIHtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgbWF0aCB3aWxsIGJlIHJlbmRlcmVkIGluIGRpc3BsYXkgbW9kZVxuICAgKiAobWF0aCBpbiBkaXNwbGF5IHN0eWxlIGFuZCBjZW50ZXIgbWF0aCBvbiBwYWdlKVxuICAgKlxuICAgKiBJZiBgZmFsc2VgLCBtYXRoIHdpbGwgYmUgcmVuZGVyZWQgaW4gaW5saW5lIG1vZGVcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc3BsYXlNb2RlPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgS2FUZVggd2lsbCB0aHJvdyBhIGBQYXJzZUVycm9yYCB3aGVuXG4gICAqIGl0IGVuY291bnRlcnMgYW4gdW5zdXBwb3J0ZWQgY29tbWFuZCBvciBpbnZhbGlkIExhVGV4XG4gICAqXG4gICAqIElmIGBmYWxzZWAsIEthVGVYIHdpbGwgcmVuZGVyIHVuc3VwcG9ydGVkIGNvbW1hbmRzIGFzXG4gICAqIHRleHQsIGFuZCByZW5kZXIgaW52YWxpZCBMYVRlWCBhcyBpdHMgc291cmNlIGNvZGUgd2l0aFxuICAgKiBob3ZlciB0ZXh0IGdpdmluZyB0aGUgZXJyb3IsIGluIGNvbG9yIGdpdmVuIGJ5IGVycm9yQ29sb3JcbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgdGhyb3dPbkVycm9yPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEEgQ29sb3Igc3RyaW5nIGdpdmVuIGluIGZvcm1hdCBgI1hYWGAgb3IgYCNYWFhYWFhgXG4gICAqL1xuICBlcnJvckNvbG9yPzogc3RyaW5nO1xuICAvKipcbiAgICogQSBjb2xsZWN0aW9uIG9mIGN1c3RvbSBtYWNyb3MuXG4gICAqXG4gICAqIFNlZSBgc3JjL21hY3Jvcy5qc2AgZm9yIGl0cyB1c2FnZVxuICAgKi9cbiAgbWFjcm9zPzogYW55O1xuICAvKipcbiAgICogSWYgYHRydWVgLCBgXFxjb2xvcmAgd2lsbCB3b3JrIGxpa2UgTGFUZVgncyBgXFx0ZXh0Y29sb3JgXG4gICAqIGFuZCB0YWtlcyAyIGFyZ3VtZW50c1xuICAgKlxuICAgKiBJZiBgZmFsc2VgLCBgXFxjb2xvcmAgd2lsbCB3b3JrIGxpa2UgTGFUZVgncyBgXFxjb2xvcmBcbiAgICogYW5kIHRha2VzIDEgYXJndW1lbnRcbiAgICpcbiAgICogSW4gYm90aCBjYXNlcywgYFxcdGV4dGNvbG9yYCB3b3JrcyBhcyBpbiBMYVRlWFxuICAgKlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgY29sb3JJc1RleHRDb2xvcj86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBBbGwgdXNlci1zcGVjaWZpZWQgc2l6ZXMgd2lsbCBiZSBjYXBlZCB0byBgbWF4U2l6ZWAgZW1zXG4gICAqXG4gICAqIElmIHNldCB0byBJbmZpbml0eSwgdXNlcnMgY2FuIG1ha2UgZWxlbWVudHMgYW5kIHNwYWNlXG4gICAqIGFyYml0cmFyaWx5IGxhcmdlXG4gICAqXG4gICAqIEBkZWZhdWx0IEluZmluaXR5XG4gICAqL1xuICBtYXhTaXplPzogbnVtYmVyO1xuICAvKipcbiAgICogTGltaXQgdGhlIG51bWJlciBvZiBtYWNybyBleHBhbnNpb25zIHRvIHNwZWNpZmllZCBudW1iZXJcbiAgICpcbiAgICogSWYgc2V0IHRvIGBJbmZpbml0eWAsIG1hcmNvIGV4cGFuZGVyIHdpbGwgdHJ5IHRvIGZ1bGx5IGV4cGFuZFxuICAgKiBhcyBpbiBMYVRleFxuICAgKlxuICAgKiBAZGVmYXVsdCAxMDAwXG4gICAqL1xuICBtYXhFeHBhbmQ/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBBbGxvd2VkIHByb3RvY29scyBpbiBgXFxocmVmYFxuICAgKlxuICAgKiBVc2UgYF9yZWxhdGl2ZWAgdG8gYWxsb3cgcmVsYXRpdmUgdXJsc1xuICAgKlxuICAgKiBVc2UgYCpgIHRvIGFsbG93IGFsbCBwcm90b2NvbHNcbiAgICovXG4gIGFsbG93ZWRQcm90b2NvbHM/OiBzdHJpbmdbXTtcbiAgLyoqXG4gICAqIElmIGBmYWxzZWAgb3IgYFwiaWdub3JlXCJgLCBhbGxvdyBmZWF0dXJlcyB0aGF0IG1ha2VcbiAgICogd3JpdGluZyBpbiBMYVRleCBjb252ZW5pZW50IGJ1dCBub3Qgc3VwcG9ydGVkIGJ5IExhVGV4XG4gICAqXG4gICAqIElmIGB0cnVlYCBvciBgXCJlcnJvclwiYCwgdGhyb3cgYW4gZXJyb3IgZm9yIHN1Y2ggdHJhbnNncmVzc2lvbnNcbiAgICpcbiAgICogSWYgYFwid2FyblwiYCwgd2FybiBhYm91dCBiZWhhdmlvciB2aWEgYGNvbnNvbGUud2FybmBcbiAgICpcbiAgICogQGRlZmF1bHQgXCJ3YXJuXCJcbiAgICovXG4gIHN0cmljdD86IGJvb2xlYW4gfCBzdHJpbmcgfCBGdW5jdGlvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZW5kZXJNYXRoSW5FbGVtZW50U3BlY2lmaWNPcHRpb25zRGVsaW1pdGVycyB7XG4gIC8qKlxuICAgKiBBIHN0cmluZyB3aGljaCBzdGFydHMgdGhlIG1hdGggZXhwcmVzc2lvbiAoaS5lLiB0aGUgbGVmdCBkZWxpbWl0ZXIpXG4gICAqL1xuICBsZWZ0OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBIHN0cmluZyB3aGljaCBlbmRzIHRoZSBtYXRoIGV4cHJlc3Npb24gKGkuZS4gdGhlIHJpZ2h0IGRlbGltaXRlcilcbiAgICovXG4gIHJpZ2h0OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBIGJvb2xlYW4gb2Ygd2hldGhlciB0aGUgbWF0aCBpbiB0aGUgZXhwcmVzc2lvbiBzaG91bGQgYmUgcmVuZGVyZWQgaW4gZGlzcGxheSBtb2RlIG9yIG5vdFxuICAgKi9cbiAgZGlzcGxheTogYm9vbGVhblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlbmRlck1hdGhJbkVsZW1lbnRTcGVjaWZpY09wdGlvbnMge1xuICAvKipcbiAgICogQSBsaXN0IG9mIGRlbGltaXRlcnMgdG8gbG9vayBmb3IgbWF0aFxuICAgKlxuICAgKiBAZGVmYXVsdCBbXG4gICAqICAge2xlZnQ6IFwiJCRcIiwgcmlnaHQ6IFwiJCRcIiwgZGlzcGxheTogdHJ1ZX0sXG4gICAqICAge2xlZnQ6IFwiXFxcXChcIiwgcmlnaHQ6IFwiXFxcXClcIiwgZGlzcGxheTogZmFsc2V9LFxuICAgKiAgIHtsZWZ0OiBcIlxcXFxbXCIsIHJpZ2h0OiBcIlxcXFxdXCIsIGRpc3BsYXk6IHRydWV9XG4gICAqIF1cbiAgICovXG4gIGRlbGltaXRlcnM/OiBSZWFkb25seUFycmF5PFJlbmRlck1hdGhJbkVsZW1lbnRTcGVjaWZpY09wdGlvbnNEZWxpbWl0ZXJzPiB8IHVuZGVmaW5lZDtcbiAgLyoqXG4gICAqIEEgbGlzdCBvZiBET00gbm9kZSB0eXBlcyB0byBpZ25vcmUgd2hlbiByZWN1cnNpbmcgdGhyb3VnaFxuICAgKlxuICAgKiBAZGVmYXVsdCBbXCJzY3JpcHRcIiwgXCJub3NjcmlwdFwiLCBcInN0eWxlXCIsIFwidGV4dGFyZWFcIiwgXCJwcmVcIiwgXCJjb2RlXCJdXG4gICAqL1xuICBpZ25vcmVkVGFncz86IFJlYWRvbmx5QXJyYXk8a2V5b2YgSFRNTEVsZW1lbnRUYWdOYW1lTWFwPiB8IHVuZGVmaW5lZDtcbiAgLyoqXG4gICAqIEEgbGlzdCBvZiBET00gbm9kZSBjbGFzcyBuYW1lcyB0byBpZ25vcmUgd2hlbiByZWN1cnNpbmcgdGhyb3VnaFxuICAgKlxuICAgKiBAZGVmYXVsdCBbXVxuICAgKi9cbiAgaWdub3JlZENsYXNzZXM/OiBzdHJpbmdbXSB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogQSBjYWxsYmFjayBtZXRob2QgcmV0dXJuaW5nIGEgbWVzc2FnZSBhbmQgYW4gZXJyb3Igc3RhY2sgaW4gY2FzZSBvZiBhbiBjcml0aWNhbCBlcnJvciBkdXJpbmcgcmVuZGVyaW5nXG4gICAqIEBwYXJhbSBtc2cgTWVzc2FnZSBnZW5lcmF0ZWQgYnkgS2FUZVhcbiAgICogQHBhcmFtIGVyciBDYXVnaHQgZXJyb3JcbiAgICpcbiAgICogQGRlZmF1bHQgY29uc29sZS5lcnJvclxuICAgKi9cbiAgZXJyb3JDYWxsYmFjaz8obXNnOiBzdHJpbmcsIGVycjogRXJyb3IpOiB2b2lkO1xufVxuXG4vKipcbiogcmVuZGVyTWF0aEluRWxlbWVudCBvcHRpb25zIGNvbnRhaW4gS2FUZVggcmVuZGVyIG9wdGlvbnMgYW5kIHJlbmRlck1hdGhJbkVsZW1lbnQgc3BlY2lmaWMgb3B0aW9uc1xuKi9cbmV4cG9ydCB0eXBlIEthdGV4T3B0aW9ucyA9IEthdGV4U3BlY2lmaWNPcHRpb25zICYgUmVuZGVyTWF0aEluRWxlbWVudFNwZWNpZmljT3B0aW9ucztcbiJdfQ==